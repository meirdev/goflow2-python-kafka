"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class FlowMessage(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _FlowType:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _FlowTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[FlowMessage._FlowType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        FLOWUNKNOWN: FlowMessage._FlowType.ValueType  # 0
        SFLOW_5: FlowMessage._FlowType.ValueType  # 1
        NETFLOW_V5: FlowMessage._FlowType.ValueType  # 2
        NETFLOW_V9: FlowMessage._FlowType.ValueType  # 3
        IPFIX: FlowMessage._FlowType.ValueType  # 4

    class FlowType(_FlowType, metaclass=_FlowTypeEnumTypeWrapper): ...
    FLOWUNKNOWN: FlowMessage.FlowType.ValueType  # 0
    SFLOW_5: FlowMessage.FlowType.ValueType  # 1
    NETFLOW_V5: FlowMessage.FlowType.ValueType  # 2
    NETFLOW_V9: FlowMessage.FlowType.ValueType  # 3
    IPFIX: FlowMessage.FlowType.ValueType  # 4

    class _LayerStack:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _LayerStackEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[FlowMessage._LayerStack.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        Ethernet: FlowMessage._LayerStack.ValueType  # 0
        IPv4: FlowMessage._LayerStack.ValueType  # 1
        IPv6: FlowMessage._LayerStack.ValueType  # 2
        TCP: FlowMessage._LayerStack.ValueType  # 3
        UDP: FlowMessage._LayerStack.ValueType  # 4
        MPLS: FlowMessage._LayerStack.ValueType  # 5
        Dot1Q: FlowMessage._LayerStack.ValueType  # 6
        ICMP: FlowMessage._LayerStack.ValueType  # 7
        ICMPv6: FlowMessage._LayerStack.ValueType  # 8
        GRE: FlowMessage._LayerStack.ValueType  # 9
        IPv6HeaderRouting: FlowMessage._LayerStack.ValueType  # 10
        IPv6HeaderFragment: FlowMessage._LayerStack.ValueType  # 11
        Geneve: FlowMessage._LayerStack.ValueType  # 12
        Teredo: FlowMessage._LayerStack.ValueType  # 13
        Custom: FlowMessage._LayerStack.ValueType  # 99
        """todo: add nsh"""

    class LayerStack(_LayerStack, metaclass=_LayerStackEnumTypeWrapper):
        """Encapsulation"""

    Ethernet: FlowMessage.LayerStack.ValueType  # 0
    IPv4: FlowMessage.LayerStack.ValueType  # 1
    IPv6: FlowMessage.LayerStack.ValueType  # 2
    TCP: FlowMessage.LayerStack.ValueType  # 3
    UDP: FlowMessage.LayerStack.ValueType  # 4
    MPLS: FlowMessage.LayerStack.ValueType  # 5
    Dot1Q: FlowMessage.LayerStack.ValueType  # 6
    ICMP: FlowMessage.LayerStack.ValueType  # 7
    ICMPv6: FlowMessage.LayerStack.ValueType  # 8
    GRE: FlowMessage.LayerStack.ValueType  # 9
    IPv6HeaderRouting: FlowMessage.LayerStack.ValueType  # 10
    IPv6HeaderFragment: FlowMessage.LayerStack.ValueType  # 11
    Geneve: FlowMessage.LayerStack.ValueType  # 12
    Teredo: FlowMessage.LayerStack.ValueType  # 13
    Custom: FlowMessage.LayerStack.ValueType  # 99
    """todo: add nsh"""

    TYPE_FIELD_NUMBER: builtins.int
    TIME_RECEIVED_NS_FIELD_NUMBER: builtins.int
    SEQUENCE_NUM_FIELD_NUMBER: builtins.int
    SAMPLING_RATE_FIELD_NUMBER: builtins.int
    SAMPLER_ADDRESS_FIELD_NUMBER: builtins.int
    TIME_FLOW_START_NS_FIELD_NUMBER: builtins.int
    TIME_FLOW_END_NS_FIELD_NUMBER: builtins.int
    BYTES_FIELD_NUMBER: builtins.int
    PACKETS_FIELD_NUMBER: builtins.int
    SRC_ADDR_FIELD_NUMBER: builtins.int
    DST_ADDR_FIELD_NUMBER: builtins.int
    ETYPE_FIELD_NUMBER: builtins.int
    PROTO_FIELD_NUMBER: builtins.int
    SRC_PORT_FIELD_NUMBER: builtins.int
    DST_PORT_FIELD_NUMBER: builtins.int
    IN_IF_FIELD_NUMBER: builtins.int
    OUT_IF_FIELD_NUMBER: builtins.int
    SRC_MAC_FIELD_NUMBER: builtins.int
    DST_MAC_FIELD_NUMBER: builtins.int
    SRC_VLAN_FIELD_NUMBER: builtins.int
    DST_VLAN_FIELD_NUMBER: builtins.int
    VLAN_ID_FIELD_NUMBER: builtins.int
    IP_TOS_FIELD_NUMBER: builtins.int
    FORWARDING_STATUS_FIELD_NUMBER: builtins.int
    IP_TTL_FIELD_NUMBER: builtins.int
    IP_FLAGS_FIELD_NUMBER: builtins.int
    TCP_FLAGS_FIELD_NUMBER: builtins.int
    ICMP_TYPE_FIELD_NUMBER: builtins.int
    ICMP_CODE_FIELD_NUMBER: builtins.int
    IPV6_FLOW_LABEL_FIELD_NUMBER: builtins.int
    FRAGMENT_ID_FIELD_NUMBER: builtins.int
    FRAGMENT_OFFSET_FIELD_NUMBER: builtins.int
    SRC_AS_FIELD_NUMBER: builtins.int
    DST_AS_FIELD_NUMBER: builtins.int
    NEXT_HOP_FIELD_NUMBER: builtins.int
    NEXT_HOP_AS_FIELD_NUMBER: builtins.int
    SRC_NET_FIELD_NUMBER: builtins.int
    DST_NET_FIELD_NUMBER: builtins.int
    BGP_NEXT_HOP_FIELD_NUMBER: builtins.int
    BGP_COMMUNITIES_FIELD_NUMBER: builtins.int
    AS_PATH_FIELD_NUMBER: builtins.int
    MPLS_TTL_FIELD_NUMBER: builtins.int
    MPLS_LABEL_FIELD_NUMBER: builtins.int
    MPLS_IP_FIELD_NUMBER: builtins.int
    OBSERVATION_DOMAIN_ID_FIELD_NUMBER: builtins.int
    OBSERVATION_POINT_ID_FIELD_NUMBER: builtins.int
    LAYER_STACK_FIELD_NUMBER: builtins.int
    LAYER_SIZE_FIELD_NUMBER: builtins.int
    IPV6_ROUTING_HEADER_ADDRESSES_FIELD_NUMBER: builtins.int
    IPV6_ROUTING_HEADER_SEG_LEFT_FIELD_NUMBER: builtins.int
    type: global___FlowMessage.FlowType.ValueType
    time_received_ns: builtins.int
    sequence_num: builtins.int
    sampling_rate: builtins.int
    sampler_address: builtins.bytes
    """uint32 flow_direction = 42;

    Sampler information
    """
    time_flow_start_ns: builtins.int
    """Found inside packet"""
    time_flow_end_ns: builtins.int
    bytes: builtins.int
    """Size of the sampled packet"""
    packets: builtins.int
    src_addr: builtins.bytes
    """Source/destination addresses"""
    dst_addr: builtins.bytes
    etype: builtins.int
    """Layer 3 protocol (IPv4/IPv6/ARP/MPLS...)"""
    proto: builtins.int
    """Layer 4 protocol"""
    src_port: builtins.int
    """Ports for UDP and TCP"""
    dst_port: builtins.int
    in_if: builtins.int
    """Interfaces"""
    out_if: builtins.int
    src_mac: builtins.int
    """Ethernet information"""
    dst_mac: builtins.int
    src_vlan: builtins.int
    """Vlan"""
    dst_vlan: builtins.int
    vlan_id: builtins.int
    """802.1q VLAN in sampled packet"""
    ip_tos: builtins.int
    """IP and TCP special flags"""
    forwarding_status: builtins.int
    ip_ttl: builtins.int
    ip_flags: builtins.int
    tcp_flags: builtins.int
    icmp_type: builtins.int
    icmp_code: builtins.int
    ipv6_flow_label: builtins.int
    fragment_id: builtins.int
    """Fragments (IPv4/IPv6)"""
    fragment_offset: builtins.int
    src_as: builtins.int
    """Autonomous system information"""
    dst_as: builtins.int
    next_hop: builtins.bytes
    next_hop_as: builtins.int
    src_net: builtins.int
    """Prefix size"""
    dst_net: builtins.int
    bgp_next_hop: builtins.bytes
    """BGP information"""
    observation_domain_id: builtins.int
    observation_point_id: builtins.int
    ipv6_routing_header_seg_left: builtins.int
    """SRv6"""
    @property
    def bgp_communities(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def as_path(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def mpls_ttl(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """MPLS information"""

    @property
    def mpls_label(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def mpls_ip(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]: ...
    @property
    def layer_stack(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[global___FlowMessage.LayerStack.ValueType]: ...
    @property
    def layer_size(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]: ...
    @property
    def ipv6_routing_header_addresses(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.bytes]:
        """SRv6"""

    def __init__(
        self,
        *,
        type: global___FlowMessage.FlowType.ValueType = ...,
        time_received_ns: builtins.int = ...,
        sequence_num: builtins.int = ...,
        sampling_rate: builtins.int = ...,
        sampler_address: builtins.bytes = ...,
        time_flow_start_ns: builtins.int = ...,
        time_flow_end_ns: builtins.int = ...,
        bytes: builtins.int = ...,
        packets: builtins.int = ...,
        src_addr: builtins.bytes = ...,
        dst_addr: builtins.bytes = ...,
        etype: builtins.int = ...,
        proto: builtins.int = ...,
        src_port: builtins.int = ...,
        dst_port: builtins.int = ...,
        in_if: builtins.int = ...,
        out_if: builtins.int = ...,
        src_mac: builtins.int = ...,
        dst_mac: builtins.int = ...,
        src_vlan: builtins.int = ...,
        dst_vlan: builtins.int = ...,
        vlan_id: builtins.int = ...,
        ip_tos: builtins.int = ...,
        forwarding_status: builtins.int = ...,
        ip_ttl: builtins.int = ...,
        ip_flags: builtins.int = ...,
        tcp_flags: builtins.int = ...,
        icmp_type: builtins.int = ...,
        icmp_code: builtins.int = ...,
        ipv6_flow_label: builtins.int = ...,
        fragment_id: builtins.int = ...,
        fragment_offset: builtins.int = ...,
        src_as: builtins.int = ...,
        dst_as: builtins.int = ...,
        next_hop: builtins.bytes = ...,
        next_hop_as: builtins.int = ...,
        src_net: builtins.int = ...,
        dst_net: builtins.int = ...,
        bgp_next_hop: builtins.bytes = ...,
        bgp_communities: collections.abc.Iterable[builtins.int] | None = ...,
        as_path: collections.abc.Iterable[builtins.int] | None = ...,
        mpls_ttl: collections.abc.Iterable[builtins.int] | None = ...,
        mpls_label: collections.abc.Iterable[builtins.int] | None = ...,
        mpls_ip: collections.abc.Iterable[builtins.bytes] | None = ...,
        observation_domain_id: builtins.int = ...,
        observation_point_id: builtins.int = ...,
        layer_stack: collections.abc.Iterable[global___FlowMessage.LayerStack.ValueType] | None = ...,
        layer_size: collections.abc.Iterable[builtins.int] | None = ...,
        ipv6_routing_header_addresses: collections.abc.Iterable[builtins.bytes] | None = ...,
        ipv6_routing_header_seg_left: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["as_path", b"as_path", "bgp_communities", b"bgp_communities", "bgp_next_hop", b"bgp_next_hop", "bytes", b"bytes", "dst_addr", b"dst_addr", "dst_as", b"dst_as", "dst_mac", b"dst_mac", "dst_net", b"dst_net", "dst_port", b"dst_port", "dst_vlan", b"dst_vlan", "etype", b"etype", "forwarding_status", b"forwarding_status", "fragment_id", b"fragment_id", "fragment_offset", b"fragment_offset", "icmp_code", b"icmp_code", "icmp_type", b"icmp_type", "in_if", b"in_if", "ip_flags", b"ip_flags", "ip_tos", b"ip_tos", "ip_ttl", b"ip_ttl", "ipv6_flow_label", b"ipv6_flow_label", "ipv6_routing_header_addresses", b"ipv6_routing_header_addresses", "ipv6_routing_header_seg_left", b"ipv6_routing_header_seg_left", "layer_size", b"layer_size", "layer_stack", b"layer_stack", "mpls_ip", b"mpls_ip", "mpls_label", b"mpls_label", "mpls_ttl", b"mpls_ttl", "next_hop", b"next_hop", "next_hop_as", b"next_hop_as", "observation_domain_id", b"observation_domain_id", "observation_point_id", b"observation_point_id", "out_if", b"out_if", "packets", b"packets", "proto", b"proto", "sampler_address", b"sampler_address", "sampling_rate", b"sampling_rate", "sequence_num", b"sequence_num", "src_addr", b"src_addr", "src_as", b"src_as", "src_mac", b"src_mac", "src_net", b"src_net", "src_port", b"src_port", "src_vlan", b"src_vlan", "tcp_flags", b"tcp_flags", "time_flow_end_ns", b"time_flow_end_ns", "time_flow_start_ns", b"time_flow_start_ns", "time_received_ns", b"time_received_ns", "type", b"type", "vlan_id", b"vlan_id"]) -> None: ...

global___FlowMessage = FlowMessage
